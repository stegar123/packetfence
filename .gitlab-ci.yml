---
################################################################################
# COMMON PARAMETERS
################################################################################
before_script:
  - unset http_proxy ; unset https_proxy
  - env | grep ^CI_

################################################################################
# STAGES
################################################################################
stages:
  - check
  - build_img
  - build_img_container
  - build_artifacts
  - sign
  - publish
  - test
  - deploy
  - build_pf_img

################################################################################
# VARIABLES
################################################################################
variables:
  # synced with Pipeline timeout in GitLab UI
  PIPELINE_TIMEOUT_SCRIPT: 160m
  PIPELINE_TIMEOUT_CLEANUP: 10m
  BUILD_PFAPPSERVER_VUE: "yes"
  PFBUILD_CENTOS_8_IMG: ghcr.io/inverse-inc/packetfence/pfbuild-centos-8
  PFBUILD_DEB_BULLSEYE_IMG: ghcr.io/inverse-inc/packetfence/pfbuild-debian-bullseye
  KANIKO_DEBUG_IMG: gcr.io/kaniko-project/executor:debug
  KANIKOBUILD_IMG: ghcr.io/inverse-inc/packetfence/kaniko-build
  KNK_REGISTRY: ghcr.io
  KNK_REGISTRY_URL: ${KNK_REGISTRY}/inverse-inc/packetfence
  PFBUILD_DEFAULT_DEV_TAG: latest
  CIDIR: ci
  CILIBDIR: ci/lib
  CHECKDIR: ${CILIBDIR}/check
  BUILDDIR: ${CILIBDIR}/build
  RELEASEDIR: ${CILIBDIR}/release
  TESTCIDIR: ${CILIBDIR}/test
  PACKERDIR: $CIDIR/packer
  ZENDIR: $CIDIR/packer/zen
  ISODIR: $CIDIR/debian-installer
  VAGRANT_IMG_DIR: $CIDIR/packer/vagrant_img
  TESTDIR: t/venom
  CONTAINER_DIR: containers
  UPLOAD_DIR: $CILIBDIR/upload
  SF_ZEN_REPO_URL: https://sourceforge.net/projects/packetfence/files/PacketFence%20ZEN
  SF_ISO_REPO_URL: https://sourceforge.net/projects/packetfence/files/PacketFence%20ISO
  # env variables
  ANSIBLE_FORCE_COLOR: 1
  ANSIBLE_STDOUT_CALLBACK: yaml
  VAGRANT_FORCE_COLOR: "true"


################################################################################
# TEMPLATES
################################################################################

########################################
# RULES
########################################
# run only jobs on release tag (vX.Y.Z) (push and web)
# no schedule on tag
.release_only_rules:
  rules:
    - if: '$CI_COMMIT_TAG'

# run only jobs on "devel" branch (push, schedule and web)
.devel_only_rules:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "devel"'

# run only on maintenance jobs (schedule and web, not on push)
.maintenance_only_rules:
  rules:
    - if: '$BUILD_ARTIFACTS_PKG == "no"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME =~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_REF_NAME =~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/'

# don't run if BUILD_ARTIFACTS_PKG is equals to 'no'
# run jobs on "devel" branch (push, schedule and web)
# run jobs on any branches except maintenance/X.Y branches (web,schedule)
# don't run on tag
# we used same kind of rules below but we add variable checks to add jobs to pipeline
.build_artifacts_pkg_devel_rules:
  rules:
    - if: '$BUILD_ARTIFACTS_PKG == "no"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "devel"'

# run jobs on any branches only via "Run pipeline", except:
# - devel branch
# - maintenance/X.Y branches
# don't run on tag
.build_artifacts_pkg_branches_rules:
  rules:
    - if: '$BUILD_ARTIFACTS_PKG == "no"'
      when: never
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME !~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")'

# don't run if BUILD_ARTIFACTS_PKG is equals to 'no'
# run jobs on "devel" branch *or* vX.Y.Z tag (push, schedule and web)
# run jobs on any branches/tags (web,schedule)
.devel_release_branches_and_maintenance_rules:
  rules:
    - if: '$BUILD_ARTIFACTS_PKG == "no"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "devel"'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

# run this job on devel branch if not canceled by BUILD_IMG_CONTAINER=no or commit message build_img_container=no
.build_img_container_devel_rules:
  rules:
    - if: '$BUILD_IMG_CONTAINER == "no"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /build_img_container=no/'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "devel"'

# run this job on maintenance branches and all other branches if not canceled by BUILD_IMG_CONTAINER=no or commit message build_img_container=no
.build_img_container_branches_and_maintenance_rules:
  rules:
    - if: '$BUILD_IMG_CONTAINER == "no"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /build_img_container=no/'
      when: never
    - if: '$CI_COMMIT_REF_NAME =~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")'
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME !~ /^cloud-nac\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_REF_NAME !~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")'

# run this job on cloud nac branches if not canceled by BUILD_IMG_CONTAINER=no or commit message build_img_container=no
.build_img_container_cloud_nac_rules:
  rules:
    - if: '$BUILD_IMG_CONTAINER == "no"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /build_img_container=no/'
      when: never
    - if: '$CI_COMMIT_REF_NAME =~ /^cloud-nac\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")'

# only run this job on devel branch with BUILD_IMG_DOCKER variable defined or build_img_docker in commit message
.build_img_docker_devel_rules:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "devel" && ($BUILD_IMG_DOCKER == "yes" || $CI_COMMIT_MESSAGE =~ /build_img_docker=yes/)'

# run this job on maintenance branches and all other branches if not canceled by BUILD_IMG_DOCKER=no
.build_img_docker_branches_and_maintenance_rules:
  rules:
    - if: '$BUILD_IMG_DOCKER == "no"'
      when: never
    - if: '$CI_COMMIT_REF_NAME =~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")'
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME !~ /^cloud-nac\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_REF_NAME !~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")'

# run this job on cloud nac branches if not canceled by BUILD_IMG_DOCKER=no
.build_img_docker_cloud_nac_rules:
  rules:
    - if: '$BUILD_IMG_DOCKER == "no"'
      when: never
    - if: '$CI_COMMIT_REF_NAME =~ /^cloud-nac\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")'

# run jobs only when:
# - on devel branch (push,web,schedule) if variable BUILD_IMG_VAGRANT sets to yes or if CI_COMMIT_MESSAGE contains "build_img_vagrant=yes".
# - on all branches (web) if variable BUILD_IMG_VAGRANT sets to yes or if CI_COMMIT_MESSAGE contains "build_img_vagrant=yes".
# don't run on tag
.build_img_vagrant_devel_and_branches_rules:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "devel" && ( $BUILD_IMG_VAGRANT == "yes" || $CI_COMMIT_MESSAGE =~ /build_img_vagrant=yes/ )'
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "web" && ( $BUILD_IMG_VAGRANT == "yes" || $CI_COMMIT_MESSAGE =~ /build_img_vagrant=yes/ )'

.publish_ppa_rules:
  rules:
    - if: '$PUBLISH_PPA == "yes" || $CI_COMMIT_MESSAGE =~ /publish_ppa=yes/'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "web" && ( $TEST == "yes" || $CI_COMMIT_MESSAGE =~ /test=yes/ )'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ( $TEST == "yes" || $CI_COMMIT_MESSAGE =~ /test=yes/ )'

# run jobs only when:
# - on devel branch (push, web, *not* schedule) if variable TEST sets to yes or if CI_COMMIT_MESSAGE contains "test=yes".
# - on maintenance/X.Y branches only (web) if variable TEST sets to yes or if CI_COMMIT_MESSAGE contains "test=yes".
# - on maintenance/X.Y branches and devel with a schedule, with test variable defined or test=yes in commit message
# don't run on tag
.test_devel_and_maintenance_rules:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "devel" && $CI_PIPELINE_SOURCE != "schedule" && ( $TEST == "yes" || $CI_COMMIT_MESSAGE =~ /test=yes/ )'
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME =~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "web" && ( $TEST == "yes" || $CI_COMMIT_MESSAGE =~ /test=yes/ )'
    - if: '( $CI_COMMIT_REF_NAME == "devel" || $CI_COMMIT_REF_NAME =~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/) && $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_TAG == null && ( $TEST == "yes" || $CI_COMMIT_MESSAGE =~ /test=yes/ )'

# run jobs only when:
# - on all branches (except maintenance/X.Y branches) (web) if variable TEST sets to yes or if CI_COMMIT_MESSAGE contains "test=yes".
# - on all branches (except maintenance/X.Y branches) with a schedule, with test variable defined or test=yes in commit message
# don't run on tag
.test_branches_only_rules:
  rules:
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME !~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "web" && ( $TEST == "yes" || $CI_COMMIT_MESSAGE =~ /test=yes/ )'
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME !~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "schedule" && ( $TEST == "yes" || $CI_COMMIT_MESSAGE =~ /test=yes/ )'

# run jobs only when:
# - on all branches (maintenance/X.Y branches included) and devel with a schedule
.check_devel_branches_and_maintenance_rules:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_TAG == null'

# run this job on:
# - devel branch with BUILD_PF_IMG_ZEN variable defined or build_pf_img_zen=yes in commit message
# - all branches (maintenances included), except devel (web) if variable BUILD_PF_IMG_ZEN sets to yes or if CI_COMMIT_MESSAGE contains "build_pf_img_zen=yes".
.build_pf_img_zen_devel_branches_and_maintenance_rules:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "devel" && ( $BUILD_PF_IMG_ZEN == "yes" || $CI_COMMIT_MESSAGE =~ /build_pf_img_zen=yes/ )'
    - if: '$CI_COMMIT_REF_NAME =~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && ( $BUILD_PF_IMG_ZEN == "yes" || $CI_COMMIT_MESSAGE =~ /build_pf_img_zen=yes/ ) && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")'
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME !~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "web" && ( $BUILD_PF_IMG_ZEN == "yes" || $CI_COMMIT_MESSAGE =~ /build_pf_img_zen=yes/ )'

# run this job on:
# - devel branch with BUILD_PF_IMG_ISO variable defined or build_pf_img_iso=yes in commit message
# - all branches (maintenancen include), except and devel (web) if variable BUILD_PF_IMG_ISO sets to yes or if CI_COMMIT_MESSAGE contains "build_pf_img_iso=yes".
.build_pf_img_iso_devel_branches_and_maintenance_rules:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "devel" && ( $BUILD_PF_IMG_ISO == "yes" || $CI_COMMIT_MESSAGE =~ /build_pf_img_iso=yes/ )'
    - if: '$CI_COMMIT_REF_NAME =~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && ( $BUILD_PF_IMG_ISO == "yes" || $CI_COMMIT_MESSAGE =~ /build_pf_img_iso=yes/ ) && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")'
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME !~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "web" && ( $BUILD_PF_IMG_ISO == "yes" || $CI_COMMIT_MESSAGE =~ /build_pf_img_iso=yes/ )'

# run this job on:
# - devel branch with BUILD_ARTIFACTS_WEBSITE variable defined or build_artifacts_website=yes in commit message
# - all branches, except maintenance/X.Y and devel (web) if variable BUILD_ARTIFACTS_WEBSITE sets to yes or if CI_COMMIT_MESSAGE contains "build_artifacts_website=yes".
.build_artifacts_website_devel_and_branches_rules:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "devel" && ( $BUILD_ARTIFACTS_WEBSITE == "yes" || $CI_COMMIT_MESSAGE =~ /build_artifacts_website=yes/ )'
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME !~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "web" && ( $BUILD_ARTIFACTS_WEBSITE == "yes" || $CI_COMMIT_MESSAGE =~ /build_artifacts_website=yes/ )'

# run this job on:
# - devel branch with BUILD_ARTIFACTS_MATERIAL variable defined or build_artifacts_material=yes in commit message
# - all branches, except maintenance/X.Y and devel (web) if variable BUILD_ARTIFACTS_MATERIAL sets to yes or if CI_COMMIT_MESSAGE contains "build_artifacts_material=yes".
.build_artifacts_material_devel_and_branches_rules:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "devel" && ( $BUILD_ARTIFACTS_MATERIAL == "yes" || $CI_COMMIT_MESSAGE =~ /build_artifacts_material=yes/ )'
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME !~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "web" && ( $BUILD_ARTIFACTS_MATERIAL == "yes" || $CI_COMMIT_MESSAGE =~ /build_artifacts_material=yes/ )'


# run this job on:
# - devel branch with BUILD_ARTIFACTS_DOC variable defined or build_artifacts_doc=yes in commit message
# - all branches, except devel (web) if variable BUILD_ARTIFACTS_DOC sets to yes or if CI_COMMIT_MESSAGE contains "build_artifacts_doc=yes".
.build_artifacts_doc_devel_and_branches_rules:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "devel" && ( $BUILD_ARTIFACTS_DOC == "yes" || $CI_COMMIT_MESSAGE =~ /build_artifacts_doc=yes/ )'
    - if: '$CI_COMMIT_REF_NAME =~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "web" && ( $BUILD_ARTIFACTS_DOC == "yes" || $CI_COMMIT_MESSAGE =~ /build_artifacts_doc=yes/ )'
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME !~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "web" && ( $BUILD_ARTIFACTS_DOC == "yes" || $CI_COMMIT_MESSAGE =~ /build_artifacts_doc=yes/ )'

# don't run if DEPLOY_PKG is equals to 'no'
# run only jobs on "devel" branch (push, schedule and web)
.deploy_devel_rules:
  rules:
    - if: '$DEPLOY_PKG == "no"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "devel"'

# don't run if DEPLOY_PKG is equals to 'no'
# run jobs on any branches only via "Run pipeline", except:
# - devel branch
# - maintenance/X.Y branches
.deploy_branches_rules:
  rules:
    - if: '$DEPLOY_PKG == "no"'
      when: never
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME !~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_COMMIT_REF_NAME != "devel" && $CI_COMMIT_REF_NAME !~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/ && $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "schedule"'

# don't run if DEPLOY_PKG is equals to 'no'
# run only on maintenance jobs (schedule and web, not on push)
.deploy_maintenance_rules:
  rules:
    - if: '$DEPLOY_PKG == "no"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME =~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_REF_NAME =~ /^maintenance\/[[:digit:]]+\.[[:digit:]]+$/'

########################################
# JOBS
########################################
.check_job:
  stage: check
  dependencies: []
  script:
    - ${CHECKDIR}/run-pipeline-if-necessary.sh
  tags:
    - docker

.build_img_docker_job:
  stage: build_img
  script:
    - timeout ${PIPELINE_TIMEOUT_SCRIPT} make -e -C ${PACKERDIR} build_img_docker_pfbuild
  tags:
    - shell

.build_img_container_job_dev:
  stage: build_img_container
  dependencies: []
  image: ${KANIKOBUILD_IMG}:${CI_COMMIT_REF_SLUG}
  script:
    - /bin/kanikobuild
  tags:
    - docker

.build_img_container_job_br_maint:
  stage: build_img_container
  dependencies: []
  image: ${KANIKOBUILD_IMG}:${CI_COMMIT_REF_SLUG}
  script:
    - /bin/kanikobuild
  tags:
    - docker

.build_img_container_job_cloud_nac:
  stage: build_img_container
  dependencies: []
  image: ${KANIKOBUILD_IMG}:${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  script:
    - /bin/kanikobuild
  tags:
    - docker

.build_img_container_job_rel:
  stage: build_img_container
  dependencies: []
  image: ${KANIKOBUILD_IMG}:${CI_COMMIT_TAG}
  script:
    - /bin/kanikobuild
  tags:
    - docker

.build_img_container_kanikobuild_job:
  stage: build_img_container
  dependencies: []
  image:
    name: ${KANIKO_DEBUG_IMG}
    entrypoint: [""]
  script:
    - ${CONTAINER_DIR}/kanikobuild
  tags:
    - docker

.build_img_vagrant_devel_and_branches_job:
  stage: build_img
  variables:
    RESULT_DIR: /var/local/gitlab-runner/vagrant_img
    BOX_DESC: ${CI_PIPELINE_URL}
  script:
    - timeout ${PIPELINE_TIMEOUT_SCRIPT} make -e -C ${VAGRANT_IMG_DIR} ${BOX_NAME}
  # implicit timeout = 5 minutes, see https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2716
  after_script:
    - make -e -C ${VAGRANT_IMG_DIR} clean
  tags:
    - shell
    - inverse.ca

.build_artifacts_pkg_job:
  stage: build_artifacts
  artifacts:
    expire_in: 1 day
    paths:
      - result/*
  tags:
    - docker

.build_artifacts_website_job:
  stage: build_artifacts
  dependencies: []
  script:
    - make -e website
  artifacts:
    expire_in: 1 day
    paths:
      - website/*
  tags:
    - docker

.build_artifacts_material_job:
  stage: build_artifacts
  dependencies: []
  variables:
    GIT_USER_NAME: packetfence-bot
    GIT_USER_MAIL: ${GIT_USER_NAME}@inverse.ca
    #GIT_USER_PASSWORD: provided through environment
    GIT_REPO: git.inverse.ca/inverse/website-packetfence.git
    SRC_FILE: result/material.html
    DST_FILE: layouts/partials/about/material.html
  script:
    - ${BUILDDIR}/generate-material.sh
  tags:
    - shell

.build_artifacts_doc_job:
  stage: build_artifacts
  dependencies: []
  script:
    - make -C html/pfappserver/root/ vendor
    - make -C html/pfappserver/root/ light-dist
    - make html
    - make pdf
  artifacts:
    expire_in: 1 day
    paths:
      - docs/*.html
      - docs/*.pdf
      - docs/images/*
  tags:
    - docker

.publish_job:
  stage: publish
  environment:
    name: PPA
    url: http://inverse.ca/downloads/PacketFence/gitlab/${CI_PIPELINE_ID}
  script:
    - ci-pages-ppa
    - ci-pages-home
    - ci-pages-tree
    - ./${UPLOAD_DIR}/deploy-artifacts.sh ppa
  variables:
    DEPLOY_USER: reposync
    DEPLOY_HOST: web.inverse.ca
    DEPLOY_PORT: 444
    PPA_ID: ${CI_PIPELINE_ID}
  tags:
    - shell

.test_job:
  stage: test
  dependencies: []
  artifacts:
    when: always
    expire_in: 1 day
    paths:
      - results/*
  tags:
    - test-shell-v7

.deploy_deb_job:
  stage: deploy
  dependencies:
    - sign_devel_release_branches_and_maintenance
  variables:
    DEPLOY_USER: reposync
    DEPLOY_HOST: web.inverse.ca
    DEPLOY_PORT: 444
  script:
    - ./${UPLOAD_DIR}/deploy-artifacts.sh deb
  tags:
    - shell

.deploy_maintenance_deb_job:
  stage: deploy
  dependencies:
    - sign_devel_release_branches_and_maintenance
  variables:
    DEPLOY_USER: reposync
    DEPLOY_HOST: web.inverse.ca
    DEPLOY_PORT: 444
  script:
    - ./${UPLOAD_DIR}/deploy-artifacts.sh deb
  tags:
    - shell

.deploy_rpm_job:
  stage: deploy
  dependencies:
    - sign_devel_release_branches_and_maintenance
  variables:
    DEPLOY_USER: reposync
    DEPLOY_HOST: web.inverse.ca
    DEPLOY_SRPMS: "no"
    DEPLOY_PORT: 444
  script:
    - ./${UPLOAD_DIR}/deploy-artifacts.sh rpm
  tags:
    - shell

.deploy_rpm_maintenance_job:
  stage: deploy
  dependencies:
    - sign_devel_release_branches_and_maintenance
  variables:
    DEPLOY_USER: reposync
    DEPLOY_HOST: web.inverse.ca
    DEPLOY_SRPMS: "no"
    DEPLOY_PORT: 444
  script:
    - ./${UPLOAD_DIR}/deploy-artifacts.sh rpm
  tags:
    - shell

.deploy_pkg_friendly_names:
  stage: deploy
  dependencies:
    - sign_devel_release_branches_and_maintenance
  variables:
    DEPLOY_USER: reposync
    DEPLOY_HOST: web.inverse.ca
    DEPLOY_PORT: 444
  script:
    - ./${UPLOAD_DIR}/deploy-artifacts.sh packetfence-release
    - ./${UPLOAD_DIR}/deploy-artifacts.sh packetfence-export
    - ./${UPLOAD_DIR}/deploy-artifacts.sh packetfence-ci-lib
  tags:
    - shell

.deploy_website_artifacts_job:
  stage: deploy
  dependencies:
    - build_artifacts_website_devel_and_branches
    - build_artifacts_website_release
  variables:
    DEPLOY_USER: reposync
    DEPLOY_HOST: web.inverse.ca
    DEPLOY_PORT: 444
  script:
    - ./${UPLOAD_DIR}/deploy-artifacts.sh website
  tags:
    - shell

.build_pf_img_zen_job:
  stage: build_pf_img
  environment:
    name: sourceforge
    url: ${SF_ZEN_REPO_URL}/${CI_COMMIT_REF_NAME}
  # implicit timeout = 5 minutes, see https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2716
  after_script:
    - make -e -C ${ZENDIR} clean_all
  dependencies: []
  tags:
    - shell-sourceforge

.build_pf_img_iso_job:
  stage: build_pf_img
  environment:
    name: sourceforge
  # implicit timeout = 5 minutes, see https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2716
  after_script:
    - make -e -C ${ISODIR} clean
  dependencies: []
  tags:
    - shell-sourceforge

.build_pf_img_vagrant_release_job:
  stage: build_pf_img
  variables:
    RESULT_DIR: /var/local/gitlab-runner/vagrant_img
    BOX_DESC: ${CI_PIPELINE_URL}
  script:
    - timeout ${PIPELINE_TIMEOUT_SCRIPT} make -e -C ${VAGRANT_IMG_DIR} ${BOX_NAME}
  # implicit timeout = 5 minutes, see https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2716
  after_script:
    - make -e -C ${VAGRANT_IMG_DIR} clean
  dependencies: []
  tags:
    - inverse.ca
    - shell

.rpm_script_job:
  script:
    - make -e build_rpm

.deb_script_job:
  script:
    - make -e build_deb

.test_script_job:
  variables:
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-${CI_COMMIT_REF_SLUG}
  script:
    # || EXIT_CODE=$? prevents script to finish at first command
    - timeout ${PIPELINE_TIMEOUT_SCRIPT} make -e -C ${TESTDIR} MAKE_TARGET=run ${CI_JOB_NAME} || EXIT_CODE=$?
    - JOB_STATUS=$EXIT_CODE timeout ${PIPELINE_TIMEOUT_CLEANUP} ${TESTCIDIR}/clean-test-environment.sh

################################################################################
# JOBS
################################################################################

########################################
# CHECK JOBS
########################################
run_pipeline_if_necessary:
  image: ${PFBUILD_DEB_BULLSEYE_IMG}:${PFBUILD_DEFAULT_DEV_TAG}
  extends:
    - .check_job
    - .check_devel_branches_and_maintenance_rules

########################################
# BUILD_IMG_CONTAINER JOBS
########################################
# devel
kaniko_dev:
  extends:
    - .build_img_container_kanikobuild_job
    - .build_img_container_devel_rules
  variables:
    IMAGE_NAME: "kaniko-build"
    IMAGE_TAGS: "${CI_COMMIT_REF_SLUG},latest"

pfdeb_dev:
  extends:
    - .build_img_container_job_dev
    - .build_img_container_devel_rules
  needs: ["kaniko_dev"]
  variables:
    IMAGE_NAME: "pfdebian"
    IMAGE_TAGS: "${CI_COMMIT_REF_SLUG},latest"

pfdeb_based_dev:
  extends:
    - .build_img_container_job_dev
    - .build_img_container_devel_rules
  needs: ["pfdeb_dev"]
  variables:
    IMAGE_TAGS: "${CI_COMMIT_REF_SLUG},latest"
  parallel:
    # /!\ Be sure to update this list in all other matrix /!\
    matrix:
      - IMAGE_NAME:
          - "pfconfig"
          - "httpd.dispatcher"
          - "httpd.portal"
          - "api-frontend"
          - "pfacct"
          - "pfcmd"
          - "pfqueue"
          - "httpd.aaa"
          - "httpd.admin_dispatcher"
          - "httpd.webservices"
          - "radiusd"
          - "pfsetacls"
          - "pfsso"
          - "pfperl-api"
          - "pfconnector"
          - "pfpki"
          - "pfcron"
          - "haproxy-portal"
          - "haproxy-admin"
          - "proxysql"
          - "pfldapexplorer"
          - "kafka"
          - "ntlm-auth-api"
          - "git-sync"

img_dev:
  extends:
    - .build_img_container_job_dev
    - .build_img_container_devel_rules
  needs: ["pfdeb_dev"]
  variables:
    IMAGE_TAGS: "${CI_COMMIT_REF_SLUG},latest"
  parallel:
    # /!\ Be sure to update this list in all other matrix /!\
    matrix:
      - IMAGE_NAME:
          - "fingerbank-db"

rad_based_dev:
  extends:
    - .build_img_container_job_dev
    - .build_img_container_devel_rules
  needs: ["pfdeb_based_dev"]
  variables:
    IMAGE_TAGS: "${CI_COMMIT_REF_SLUG},latest"
  parallel:
    # /!\ Be sure to update this list in all other matrix /!\
    matrix:
      - IMAGE_NAME:
          - "radiusd-auth"
          - "radiusd-acct"
          - "radiusd-cli"
          - "radiusd-load-balancer"
          - "radiusd-eduroam"

# branches and maintenance
kaniko_br_maint:
  extends:
    - .build_img_container_kanikobuild_job
    - .build_img_container_branches_and_maintenance_rules
  variables:
    IMAGE_NAME: "kaniko-build"
    IMAGE_TAGS: ${CI_COMMIT_REF_SLUG}

pfdeb_br_maint:
  extends:
    - .build_img_container_job_br_maint
    - .build_img_container_branches_and_maintenance_rules
  needs: ["kaniko_br_maint"]
  variables:
    IMAGE_NAME: "pfdebian"
    IMAGE_TAGS: ${CI_COMMIT_REF_SLUG}

pfdeb_based_br_maint:
  extends:
    - .build_img_container_job_br_maint
    - .build_img_container_branches_and_maintenance_rules
  needs: ["pfdeb_br_maint"]
  variables:
    IMAGE_TAGS: ${CI_COMMIT_REF_SLUG}
  parallel:
    # /!\ Be sure to update this list in all other matrix /!\
    matrix:
      - IMAGE_NAME:
          - "pfconfig"
          - "httpd.dispatcher"
          - "httpd.portal"
          - "api-frontend"
          - "pfacct"
          - "pfcmd"
          - "pfqueue"
          - "httpd.aaa"
          - "httpd.admin_dispatcher"
          - "httpd.webservices"
          - "radiusd"
          - "pfsetacls"
          - "pfsso"
          - "pfperl-api"
          - "pfconnector"
          - "pfpki"
          - "pfcron"
          - "haproxy-portal"
          - "haproxy-admin"
          - "proxysql"
          - "pfldapexplorer"
          - "kafka"
          - "ntlm-auth-api"
          - "git-sync"

img_br_maint:
  extends:
    - .build_img_container_job_br_maint
    - .build_img_container_branches_and_maintenance_rules
  needs: ["pfdeb_br_maint"]
  variables:
    IMAGE_TAGS: ${CI_COMMIT_REF_SLUG}
  parallel:
    # /!\ Be sure to update this list in all other matrix /!\
    matrix:
      - IMAGE_NAME:
          - "fingerbank-db"

rad_based_br_maint:
  extends:
    - .build_img_container_job_br_maint
    - .build_img_container_branches_and_maintenance_rules
  needs: ["pfdeb_based_br_maint"]
  variables:
    IMAGE_TAGS: ${CI_COMMIT_REF_SLUG}
  parallel:
    # /!\ Be sure to update this list in all other matrix /!\
    matrix:
      - IMAGE_NAME:
          - "radiusd-auth"
          - "radiusd-acct"
          - "radiusd-cli"
          - "radiusd-load-balancer"
          - "radiusd-eduroam"

# cloud nac
kaniko_cloud_nac:
  extends:
    - .build_img_container_kanikobuild_job
    - .build_img_container_cloud_nac_rules
  variables:
    IMAGE_NAME: "kaniko-build"
    IMAGE_TAGS: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}

pfdeb_cloud_nac:
  extends:
    - .build_img_container_job_cloud_nac
    - .build_img_container_cloud_nac_rules
  needs: ["kaniko_cloud_nac"]
  variables:
    IMAGE_NAME: "pfdebian"
    IMAGE_TAGS: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}

pfdeb_based_cloud_nac:
  extends:
    - .build_img_container_job_cloud_nac
    - .build_img_container_cloud_nac_rules
  needs: ["pfdeb_cloud_nac"]
  variables:
    IMAGE_TAGS: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  parallel:
    # /!\ Be sure to update this list in all other matrix /!\
    matrix:
      - IMAGE_NAME:
          - "pfconfig"
          - "httpd.dispatcher"
          - "httpd.portal"
          - "api-frontend"
          - "pfacct"
          - "pfcmd"
          - "pfqueue"
          - "httpd.aaa"
          - "httpd.admin_dispatcher"
          - "httpd.webservices"
          - "radiusd"
          - "pfsetacls"
          - "pfsso"
          - "pfperl-api"
          - "pfconnector"
          - "pfpki"
          - "pfcron"
          - "haproxy-portal"
          - "haproxy-admin"
          - "proxysql"
          - "pfldapexplorer"
          - "kafka"
          - "ntlm-auth-api"

img_cloud_nac:
  extends:
    - .build_img_container_job_cloud_nac
    - .build_img_container_cloud_nac_rules
  needs: ["pfdeb_cloud_nac"]
  variables:
    IMAGE_TAGS: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  parallel:
    # /!\ Be sure to update this list in all other matrix /!\
    matrix:
      - IMAGE_NAME:
          - "fingerbank-db"

rad_based_cloud_nac:
  extends:
    - .build_img_container_job_cloud_nac
    - .build_img_container_cloud_nac_rules
  needs: ["pfdeb_based_cloud_nac"]
  variables:
    IMAGE_TAGS: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  parallel:
    # /!\ Be sure to update this list in all other matrix /!\
    matrix:
      - IMAGE_NAME:
          - "radiusd-auth"
          - "radiusd-acct"
          - "radiusd-cli"
          - "radiusd-load-balancer"
          - "radiusd-eduroam"

# release
kaniko_rel:
  extends:
    - .build_img_container_kanikobuild_job
    - .release_only_rules
  variables:
    IMAGE_NAME: "kaniko-build"
    IMAGE_TAGS: ${CI_COMMIT_TAG}

pfdeb_rel:
  extends:
    - .build_img_container_job_rel
    - .release_only_rules
  needs: ["kaniko_rel"]
  variables:
    IMAGE_NAME: "pfdebian"
    IMAGE_TAGS: ${CI_COMMIT_TAG}

pfdeb_based_rel:
  extends:
    - .build_img_container_job_rel
    - .release_only_rules
  needs: ["pfdeb_rel"]
  variables:
    IMAGE_TAGS: ${CI_COMMIT_TAG}
  parallel:
    # /!\ Be sure to update this list in all other matrix /!\
    matrix:
      - IMAGE_NAME:
          - "pfconfig"
          - "httpd.dispatcher"
          - "httpd.portal"
          - "api-frontend"
          - "pfacct"
          - "pfcmd"
          - "pfqueue"
          - "httpd.aaa"
          - "httpd.admin_dispatcher"
          - "httpd.webservices"
          - "radiusd"
          - "pfsetacls"
          - "pfsso"
          - "pfperl-api"
          - "pfconnector"
          - "pfpki"
          - "pfcron"
          - "haproxy-portal"
          - "haproxy-admin"
          - "proxysql"
          - "pfldapexplorer"
          - "kafka"
          - "ntlm-auth-api"

img_rel:
  extends:
    - .build_img_container_job_rel
    - .release_only_rules
  needs: ["pfdeb_rel"]
  variables:
   IMAGE_TAGS: ${CI_COMMIT_TAG}
  parallel:
    # /!\ Be sure to update this list in all other matrix /!\
    matrix:
      - IMAGE_NAME:
          - "fingerbank-db"

rad_based_rel:
  extends:
    - .build_img_container_job_rel
    - .release_only_rules
  needs: ["pfdeb_based_rel"]
  variables:
    IMAGE_TAGS: ${CI_COMMIT_TAG}
  parallel:
    # /!\ Be sure to update this list in all other matrix /!\
    matrix:
      - IMAGE_NAME:
          - "radiusd-auth"
          - "radiusd-acct"
          - "radiusd-cli"
          - "radiusd-load-balancer"
          - "radiusd-eduroam"

########################################
# BUILD_IMG JOBS
########################################
### build_img_docker jobs
# EL8
build_img_docker_el8_devel:
  extends:
    - .build_img_docker_job
    - .build_img_docker_devel_rules
  variables:
    DOCKER_TAGS: latest,devel,maintenance-99-9
    ACTIVE_BUILDS: 'pfbuild-centos-8'

build_img_docker_el8_branches_and_maintenance:
  extends:
    - .build_img_docker_job
    - .build_img_docker_branches_and_maintenance_rules
  variables:
    DOCKER_TAGS: ${CI_COMMIT_REF_SLUG}
    ACTIVE_BUILDS: 'pfbuild-centos-8'

# build a docker image at release
# used to build release and maintenance packages
build_img_docker_el8_release:
  extends:
    - .build_img_docker_job
    - .release_only_rules
  variables:
    DOCKER_TAGS: ${CI_COMMIT_TAG}
    ANSIBLE_CENTOS_GROUP: common_centos
    ANSIBLE_CENTOS8_GROUP: stable_centos8
    ANSIBLE_DEBIAN_GROUP: common_debian
    ANSIBLE_RUBYGEMS_GROUP: stable_rubygems
    ACTIVE_BUILDS: 'pfbuild-centos-8'

# Debian
build_img_docker_deb11_devel:
  extends:
    - .build_img_docker_job
    - .build_img_docker_devel_rules
  variables:
    DOCKER_TAGS: latest,devel,maintenance-99-9
    ACTIVE_BUILDS: 'pfbuild-bullseye'

build_img_docker_deb11_branches_and_maintenance:
  extends:
    - .build_img_docker_job
    - .build_img_docker_branches_and_maintenance_rules
  variables:
    DOCKER_TAGS: ${CI_COMMIT_REF_SLUG}
    ACTIVE_BUILDS: 'pfbuild-bullseye'

# build a docker image at release
# used to build release and maintenance packages
build_img_docker_deb11_release:
  extends:
    - .build_img_docker_job
    - .release_only_rules
  variables:
    DOCKER_TAGS: ${CI_COMMIT_TAG}
    ANSIBLE_CENTOS_GROUP: common_centos
    ANSIBLE_CENTOS8_GROUP: stable_centos8
    ANSIBLE_DEBIAN_GROUP: common_debian
    ANSIBLE_RUBYGEMS_GROUP: stable_rubygems
    ACTIVE_BUILDS: 'pfbuild-bullseye'

### build Docker images on cloud nac branches
build_img_docker_el8_cloud_nac:
  extends:
    - .build_img_docker_job
    - .build_img_docker_cloud_nac_rules
  variables:
    DOCKER_TAGS: ${CI_COMMIT_REF_SLUG},${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
    ACTIVE_BUILDS: 'pfbuild-centos-8'

build_img_docker_deb11_cloud_nac:
  extends:
    - .build_img_docker_job
    - .build_img_docker_cloud_nac_rules
  variables:
    DOCKER_TAGS: ${CI_COMMIT_REF_SLUG},${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
    ACTIVE_BUILDS: 'pfbuild-bullseye'

### build_img_vagrant jobs
# build_img_vagrant_devel_and_branches_el_8:
#   extends:
#     - .build_img_vagrant_devel_and_branches_job
#     - .build_img_vagrant_devel_and_branches_rules
#   variables:
#     BOX_NAME: pfel8dev

build_img_vagrant_devel_and_branches_debian_bullseye:
  extends:
    - .build_img_vagrant_devel_and_branches_job
    - .build_img_vagrant_devel_and_branches_rules
  variables:
    BOX_NAME: pfdeb11dev

########################################
#  BUILD_ARTIFACTS JOBS
########################################
# build_artifacts_pkg jobs for development (devel)
build_artifacts_pkg_devel_centos_8:
  image: ${PFBUILD_CENTOS_8_IMG}:${PFBUILD_DEFAULT_DEV_TAG}
  extends:
    - .build_artifacts_pkg_job
    - .rpm_script_job
    - .build_artifacts_pkg_devel_rules

build_artifacts_pkg_devel_debian_bullseye:
  image: ${PFBUILD_DEB_BULLSEYE_IMG}:${PFBUILD_DEFAULT_DEV_TAG}
  extends:
    - .build_artifacts_pkg_job
    - .deb_script_job
    - .build_artifacts_pkg_devel_rules

# build_artifacts_pkg jobs for development (branches other than devel and maintenance)
build_artifacts_pkg_branches_centos_8:
  image: ${PFBUILD_CENTOS_8_IMG}:${CI_COMMIT_REF_SLUG}
  extends:
    - .build_artifacts_pkg_job
    - .rpm_script_job
    - .build_artifacts_pkg_branches_rules

build_artifacts_pkg_branches_debian_bullseye:
  image: ${PFBUILD_DEB_BULLSEYE_IMG}:${CI_COMMIT_REF_SLUG}
  extends:
    - .build_artifacts_pkg_job
    - .deb_script_job
    - .build_artifacts_pkg_branches_rules

# build_artifacts_pkg jobs for release
# CI_COMMIT_TAG contains vX.Y.X
build_artifacts_pkg_release_centos_8:
  image: ${PFBUILD_CENTOS_8_IMG}:${CI_COMMIT_TAG}
  extends:
    - .build_artifacts_pkg_job
    - .rpm_script_job
    - .release_only_rules

build_artifacts_pkg_release_debian_bullseye:
  image: ${PFBUILD_DEB_BULLSEYE_IMG}:${CI_COMMIT_TAG}
  extends:
    - .build_artifacts_pkg_job
    - .deb_script_job
    - .release_only_rules

# CI_COMMIT_REF_SLUG contains maintenance-X-Y
build_artifacts_pkg_maintenance_centos_8:
  image: ${PFBUILD_CENTOS_8_IMG}:${CI_COMMIT_REF_SLUG}
  extends:
    - .build_artifacts_pkg_job
    - .rpm_script_job
    - .maintenance_only_rules

build_artifacts_pkg_maintenance_debian_bullseye:
  image: ${PFBUILD_DEB_BULLSEYE_IMG}:${CI_COMMIT_REF_SLUG}
  extends:
    - .build_artifacts_pkg_job
    - .deb_script_job
    - .maintenance_only_rules

# build_artifacts_website jobs for development
build_artifacts_website_devel_and_branches:
  image: ${PFBUILD_DEB_BULLSEYE_IMG}:${PFBUILD_DEFAULT_DEV_TAG}
  extends:
    - .build_artifacts_website_job
    - .build_artifacts_website_devel_and_branches_rules

# build_artifacts_website job for release
# CI_COMMIT_TAG contains vX.Y.X
build_artifacts_website_release:
  image: ${PFBUILD_DEB_BULLSEYE_IMG}:${CI_COMMIT_TAG}
  extends:
    - .build_artifacts_website_job
    - .release_only_rules

# build_artificats_material job for development
material_devel_and_branches:
  image: ${PFBUILD_DEB_BULLSEYE_IMG}:${PFBUILD_DEFAULT_DEV_TAG}
  extends:
    - .build_artifacts_material_job
    - .build_artifacts_material_devel_and_branches_rules

# build_artificats_material job for release
material_release:
  image: ${PFBUILD_DEB_BULLSEYE_IMG}:${CI_COMMIT_TAG}
  extends:
    - .build_artifacts_material_job
    - .release_only_rules

# build_artifacts_doc jobs for development
build_artifacts_doc_devel_and_branches:
  image: ${PFBUILD_DEB_BULLSEYE_IMG}:${PFBUILD_DEFAULT_DEV_TAG}
  extends:
    - .build_artifacts_doc_job
    - .build_artifacts_doc_devel_and_branches_rules

# build_artifacts_doc jobs for release
build_artifacts_doc_release:
  image: ${PFBUILD_DEB_BULLSEYE_IMG}:${CI_COMMIT_TAG}
  extends:
    - .build_artifacts_doc_job
    - .release_only_rules

########################################
# SIGN JOBS
########################################
sign_devel_release_branches_and_maintenance:
  # GPG_USER_ID see GitLab variable
  # only use when executor is docker
  image: buildpkg/debian:buster
  stage: sign
  script:
    - ci-sign-pkg
  dependencies:
    - build_artifacts_pkg_devel_centos_8
    - build_artifacts_pkg_devel_debian_bullseye
    - build_artifacts_pkg_branches_centos_8
    - build_artifacts_pkg_branches_debian_bullseye
    - build_artifacts_pkg_release_centos_8
    - build_artifacts_pkg_release_debian_bullseye
    - build_artifacts_pkg_maintenance_centos_8
    - build_artifacts_pkg_maintenance_debian_bullseye
  artifacts:
    expire_in: 1 day
    paths:
      - result/*
  tags:
    - shell
  extends:
    - .devel_release_branches_and_maintenance_rules

########################################
# PUBLISH JOBS
########################################g
publish_ppa_devel_release_branches_and_maintenance::
  # only use when executor is docker
  image: buildpkg/debian:buster
  dependencies:
    - sign_devel_release_branches_and_maintenance
  extends:
    - .publish_job
    - .publish_ppa_rules

########################################
# TEST JOBS
########################################
### development and maintenance
unit_tests_el8:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

configurator_el8:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

configurator_deb11:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

pfappserver_el8:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

pfappserver_deb11:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

dot1x_eap_peap_el8:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

dot1x_eap_peap_deb11:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

mac_auth_el8:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

mac_auth_deb11:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

dot1x_eap_tls_el8:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

dot1x_eap_tls_deb11:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

fingerbank_invalid_db_deb11:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

security_events_deb11:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

cli_login_deb11:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

cli_login_el8:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

external_integrations_deb11:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

captive_portal_el8:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

captive_portal_deb11:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

inline_deb11:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

inline_el8:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .test_devel_and_maintenance_rules

### development branches **only**
# We force VAGRANT_COMMON_DOTFILE_PATH to a specific value
unit_tests_el8_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

configurator_el8_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

configurator_deb11_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

pfappserver_el8_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

pfappserver_deb11_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

dot1x_eap_peap_el8_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

dot1x_eap_peap_deb11_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

mac_auth_el8_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

mac_auth_deb11_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

dot1x_eap_tls_el8_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

dot1x_eap_tls_deb11_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

fingerbank_invalid_db_deb11_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

security_events_deb11_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

cli_login_deb11_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

cli_login_el8_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

external_integrations_deb11_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

captive_portal_el8_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

captive_portal_deb11_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

inline_deb11_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

inline_el8_branches:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_JOB_NAME}-${CI_JOB_ID}
    VAGRANT_COMMON_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-common-devel
  extends:
    - .test_job
    - .test_script_job
    - .test_branches_only_rules

### release
configurator_el8_pristine:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_COMMIT_TAG}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .release_only_rules

configurator_deb11_pristine:
  variables:
    VAGRANT_PF_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-${CI_COMMIT_TAG}-${CI_JOB_ID}
  extends:
    - .test_job
    - .test_script_job
    - .release_only_rules


########################################
# DEPLOY JOBS
########################################
### RPM jobs
deploy_devel_rpm:
  extends:
    - .deploy_rpm_job
    - .deploy_devel_rules
  environment:
    name: pf-devel

deploy_branches_rpm:
  extends:
    - .deploy_rpm_job
    - .deploy_branches_rules
  environment:
    name: pf-branches
  variables:
    RPM_DEPLOY_DIR: branches/x86_64

deploy_release_rpm:
  extends:
    - .deploy_rpm_job
    - .release_only_rules
  environment:
    name: pf-stable

deploy_maintenance_rpm:
  extends:
    - .deploy_rpm_maintenance_job
    - .deploy_maintenance_rules
  environment:
    name: maintenance

### Debian jobs
deploy_devel_deb:
  extends:
    - .deploy_deb_job
    - .deploy_devel_rules
  environment:
    name: pf-devel
  variables:
    DEB_DEPLOY_DIR: debian

deploy_branches_deb:
  extends:
    - .deploy_deb_job
    - .deploy_branches_rules
  environment:
    name: pf-branches
  variables:
    DEB_DEPLOY_DIR: debian-branches

deploy_release_deb:
  extends:
    - .deploy_deb_job
    - .release_only_rules
  environment:
    name: pf-stable
  variables:
    DEB_DEPLOY_DIR: debian

deploy_maintenance_deb:
  extends:
    - .deploy_maintenance_deb_job
    - .deploy_maintenance_rules
  environment:
    name: maintenance
  variables:
    DEB_DEPLOY_DIR: debian

### Common jobs (Deb and RPM)
deploy_devel_pkg_friendly_names:
  extends:
    - .deploy_pkg_friendly_names
    - .deploy_devel_rules
  environment:
    name: pf-devel
  variables:
    # Values are automatically generated by deploy-artifacts.sh script based on current PF version
    # PKG_DEST_NAME:
    # PF_EXPORT_RPM_DEST_NAME:
    # PF_EXPORT_DEB_DEST_NAME:
    PF_CI_LIB_DEB_DEST_NAME: packetfence-ci-lib_devel.deb

deploy_branches_pkg_friendly_names:
  extends:
    - .deploy_pkg_friendly_names
    - .deploy_branches_rules
  environment:
    name: pf-branches
  variables:
    PKG_DEST_NAME: packetfence-release-branches.el8.noarch.rpm
    PF_EXPORT_RPM_DEST_NAME: packetfence-export-branches.el8.noarch.rpm
    PF_EXPORT_DEB_DEST_NAME: packetfence-export_branches.deb
    PF_CI_LIB_DEB_DEST_NAME: packetfence-ci-lib_branches.deb

deploy_release_pkg_friendly_names:
  extends:
    - .deploy_pkg_friendly_names
    - .release_only_rules
  environment:
    name: pf-stable
  variables:
    # Values are automatically generated by deploy-artifacts.sh script based on current PF version
    #PKG_DEST_NAME
    #PF_EXPORT_RPM_DEST_NAME
    #PF_EXPORT_DEB_DEST_NAME

deploy_maintenance_pkg_friendly_names:
  extends:
    - .deploy_pkg_friendly_names
    - .deploy_maintenance_rules
  variables:
    # Values are automatically generated by deploy-artifacts.sh script
    #PKG_DEST_NAME
    #PF_EXPORT_RPM_DEST_NAME
    #PF_EXPORT_DEB_DEST_NAME

# website artifacts
deploy_devel_and_branches_website_artifacts:
  extends:
    - .deploy_website_artifacts_job
    - .build_artifacts_website_devel_and_branches_rules

deploy_release_website_artifacts:
  extends:
    - .deploy_website_artifacts_job
    - .release_only_rules

########################################
# BUILD_PF_IMG JOBS
########################################
### build_pf_img_zen jobs
build_pf_img_zen_devel_branches_and_maintenance:
  extends:
    - .build_pf_img_zen_job
    - .build_pf_img_zen_devel_branches_and_maintenance_rules
  script:
    - timeout ${PIPELINE_TIMEOUT_SCRIPT} make -e -C ${ZENDIR} zen-deb11

build_pf_img_zen_release:
  extends:
    - .build_pf_img_zen_job
  script:
    - timeout ${PIPELINE_TIMEOUT_SCRIPT} make -e -C ${ZENDIR} zen-deb11
  # workaround for https://forum.gitlab.com/t/specify-when-at-job-level-with-a-job-that-has-rules/4769
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
      allow_failure: true

### build_pf_img_iso jobs
build_pf_img_iso_devel_branches_and_maintenance:
  extends:
    - .build_pf_img_iso_job
    - .build_pf_img_iso_devel_branches_and_maintenance_rules
  environment:
    url: ${SF_ISO_REPO_URL}/${CI_COMMIT_REF_SLUG}
  script:
    - timeout ${PIPELINE_TIMEOUT_SCRIPT} make -e -C ${ISODIR} iso

build_pf_img_iso_release:
  extends:
    - .build_pf_img_iso_job
  variables:
    PF_VERSION: ${CI_COMMIT_TAG}
  environment:
    url: ${SF_ISO_REPO_URL}/${CI_COMMIT_TAG}
  script:
    - timeout ${PIPELINE_TIMEOUT_SCRIPT} make -e -C ${ISODIR} iso
  # workaround for https://forum.gitlab.com/t/specify-when-at-job-level-with-a-job-that-has-rules/4769
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
      allow_failure: true

### build_pf_img_vagrant jobs
# build_pf_img_vagrant_release_el_8:
#   extends:
#     - .build_pf_img_vagrant_release_job
#   variables:
#     BOX_NAME: pfel8stable
#   # workaround for https://forum.gitlab.com/t/specify-when-at-job-level-with-a-job-that-has-rules/4769
#   rules:
#     - if: '$CI_COMMIT_TAG'
#       when: manual
#       allow_failure: true

build_pf_img_vagrant_release_debian_bullseye:
  extends:
    - .build_pf_img_vagrant_release_job
  variables:
    BOX_NAME: pfdeb11stable
  # workaround for https://forum.gitlab.com/t/specify-when-at-job-level-with-a-job-that-has-rules/4769
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
      allow_failure: true

