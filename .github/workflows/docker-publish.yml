name: packetfence_deb_package
on:
  push:
    branches: [ "features/inv-73" ]
#    paths:
#      - 'addons/packetfence-perl/**'
      
jobs:
  build_image_and_package:
#  build:

    runs-on: test-igor2
    # services:
    #   registry:
    #     image: registry:2
    #     ports:
    #       - 5000:5000
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3    

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v3
#        with:
#          registry: ghcr.io
#          username: ${{ vars.USER_GITHUB }}
#          password: ${{ secrets.TOKEN_GITHUB }}
          
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: packetfence-perl-debian

      - name: Build packetfence-perl docker image
        uses: docker/build-push-action@v5
        with:
          context: './addons/packetfence-perl'
          push: false
          load: true
          tags: |
            packetfence/packetfence-perl-debian:v1.21
            packetfence/packetfence-perl-debian:latest
            localhost:5000/packetfence/packetfence-perl-debian:latest
            localhost:5000/packetfence/packetfence-perl-debian:v1.21
          file: ./addons/packetfence-perl/Dockerfile-debian
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: bash-version-ls-la-first
        run: |
          docker image ls

      - name: Build debian package
        uses: addnab/docker-run-action@v3
        with:
#            image: localhost:5000/packetfence/packetfence-perl-debian:latest
            image: packetfence/packetfence-perl-debian:latest
            options: --rm -v ${{ github.workspace }}/addons/packetfence-perl/:/root -v /mnt/:/mnt/output
            shell: /bin/bash
            run: |
                set -e && python3 install_cpan.py -d dependencies.csv -vi true && 
                ./make_tar_from_source.sh

      - name: Check if the package is created
        run: |
          ls -la /mnt/debian/packages/

  smoke_test:
    runs-on: test-igor2
    needs: ['build_image_and_package']
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3    

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Build debian smoke docker image
        uses: docker/build-push-action@v5
        with:
          context: './addons/packetfence-perl'
          push: false
          load: true
          tags: |
            packetfence/packetfence-perl-debian-smoke-test:latest
          file: ./addons/packetfence-perl/Dockerfile_smoket_debian

      - name: Generate an unique container name
        id: packetfence-perl-smoket
        run: echo "contanier_name=packetfence_perl_smoke_${{ github.run_id }}_${{ github.run_attempt }}" >> "$GITHUB_OUTPUT"
    
      - name: Start docker container
        env:
          container_name: ${{ steps.packetfence-perl-smoket.outputs.contanier_name }}
        run: |
            docker run -i -d --privileged -v /dev/:/dev/  -v /mnt/debian/packages/:/mnt -v /sys/fs/cgroup:/sys/fs/cgroup:rw --cgroupns=host -p 1443:1443 -v ${{ github.workspace }}/:/root/packetfence --name "${{ container_name }}" packetfence/packetfence-perl-debian-smoke-test:latest

      - name: Install packetfence
        env:
          container_name: ${{ steps.packetfence-perl-smoket.outputs.contanier_name }}
        run: |
            docker exec -i "${{ container_name }}" apt install packetfence -y

      - name: Base packetfence configuration
        env:
          container_name: ${{ steps.packetfence-perl-smoket.outputs.contanier_name }}
        run: |
            docker exec -i "${{ container_name }}" ansible-playbook packetfence/addons/packetfence-perl/ansible-configurator/main.yml

      - name: Force install new packetfence-perl packgae
        env:
          container_name: ${{ steps.packetfence-perl-smoket.outputs.contanier_name }}
        run: |
            docker exec -i "${{ container_name }}" find /mnt -name "*.deb"

      - name: Copy smoke scipts in the right directory
        env:
          container_name: ${{ steps.packetfence-perl-smoket.outputs.contanier_name }}
        run: |
            docker exec -i "${{ container_name }}" cp -a /root/packetfence/t/* /usr/local/pf/t/

#      - name: Post clean docker envrionement
#        env:
#          container_name: ${{ steps.packetfence-perl-smoket.outputs.contanier_name }}
#        if: always()
#        run: 
#          docker rm "${{ container_name }}" -f

#            docker exec -i packetfence-perl-debian-smoke-test find /mnt -name "*.deb" -exec dpkg -i --force-overwrite {} \;


  unit-test:
    needs: ['build_image_and_package']
    runs-on: test-igor2
    container:
      image: ubuntu:20.04
#      env:
#        NODE_ENV: development
      volumes:
        - /mnt/debian/packages/:/mnt
#      options: --cpus 1
    steps:
      - name: Check for dockerenv file
        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)
      
      - name: Install the package packetfence-perl
        run: |
          cat /etc/*release
          env
          ls -la /mnt
          find /mnt -name "*.deb" -exec dpkg -i {} \;

  sign_package:
    needs: ['build_image_and_package', 'unit-test', 'smoke_test']
    runs-on: test-igor2
    container:
      image: debian:11.0
#      env:
#        NODE_ENV: development
      volumes:
        - /mnt/debian/packages/:/mnt
#      options: --cpus 1
    steps:
      - name: Install debian dependenecies
        run:  apt update && apt install gpg dpkg-sig -y

      - name: import private key
        run: echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --pinentry-mode loopback --import

      - name: Sign the package
        run: dpkg-sig -k  B022C48D3D6373D7FC256A8CCB2D3A2AA0030E2C  --sign builder /mnt/*.deb

      - name: Verifiy the signarure of package
        run: gpg --verify  /mnt/*.deb


  push_docker-image_and_deb-package: 
    needs: ['build_image_and_package', 'unit-test', 'sign_package']
    runs-on: test-igor2

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: './addons/packetfence-perl'
        push: true
        tags: |
          localhost:5000/packetfence/packetfence-perl-debian:latest
          localhost:5000/packetfence/packetfence-perl-debian:v1.21
        file: ./addons/packetfence-perl/Dockerfile-debian
        cache-from: type=gha
#        cache-to: type=gha,mode=max

    - name: Inspect
      run: |
        docker buildx imagetools inspect localhost:5000/packetfence/packetfence-perl-debian:latest
